'''
Created on Feb 24, 2012

@author: asutton
'''
import netCDF4 as netCDF4
#from pylab import *
from scipy.optimize import leastsq
import numpy as np
import fit_bg
import smooth
import sortarray as sa  
import convert_CDF as cnv
import return_DataToPlot as DP
from sys import exit
from dhva_routines import next_pow_2
from wavelet_filter import wavelet_filter as wf
import interp_field as i_f
from take_fft import *
import select_data
import find_angle as fa
import peakfind as pf
import os
import matplotlib.pyplot as plt
#from matplotlib import pyplot
#from matplotlib import figure

def analysis_sub(sample,UnSortCurrentH_in,x_in,y_in,min_field,max_field,despike, mother, wavelet_lvls, window, windowtype, figure_counter, path, name, write_file):
    figure_counter = figure_counter + 1
    x_units = UnSortCurrentH_in.units
    y_units = x_in.units
    
    UnSortCurrentH,x,y = select_data.select_data(UnSortCurrentH_in,x_in,y_in,min_field,max_field)
    
    
    power = next_pow_2(len(UnSortCurrentH))
    SampleRate = len(UnSortCurrentH[:])/(np.max(UnSortCurrentH[:]) - np.min(UnSortCurrentH[:]))
    
    #Determine the best phase angle to use from Dan's method and combine X & Y components using this value
    UnSortSignal = fa.find_angle(x,y)
    
    #Sort the x & y values in descending order of x
    CurrentH,Signal = sa.sortarray(UnSortCurrentH[:],UnSortSignal,0)
    
    #Fit polynomial background to data
    fitdata = fit_bg.bg_polynomial(CurrentH,Signal,3)
    
    #despike the data
    #despike = 1
    if despike:
        despiked_data = fitdata[0]
        #despiked_data = wf(despiked_data,2,'haar') 
        despiked_data = wf(despiked_data, wavelet_lvls, mother)
        #despiked_data = wf(despiked_data,1, 'sym2')
    else: 
        despiked_data = fitdata[0]
    
    #Run field inverter/interpolator
    interp_data, rebinH, invDeltaH = i_f.inv_field(despiked_data, CurrentH)
    newH = 1/rebinH
    #window the data

    if window:
        windowed_data = smooth.smooth(interp_data, 20, windowtype)
    else:
        windowed_data = interp_data
        
    DeltaFreq = 1/(invDeltaH)
    
    #Pad data with zeros for FFT
    pad_mult = 10
    zero_matrix = np.zeros(len(windowed_data)*pad_mult/2)
    pad_wind_data = np.append(windowed_data, zero_matrix)
    #pad_wind_data = np.append(zero_matrix, pad_wind_data)
    
    Freq, FFT_Signal = take_fft(pad_wind_data,17,DeltaFreq)
    
    #Plot raw data
    sig_Plot = plt.figure(figure_counter)
    sig_Plot.suptitle('Sample ' + sample, fontsize=16, fontweight='bold')
    
    sig_raw = sig_Plot.add_subplot(221)
    sig_raw.set_title('Raw Data', fontsize=12)
    sig_raw.plot(UnSortCurrentH,x,'r' )
    sig_raw.plot(UnSortCurrentH,y, 'g')
    sig_raw.set_xlabel('Field ('+ x_units + ')', fontsize=12)
    sig_raw.set_ylabel('Signal (' + y_units + ')', fontsize=12)
    
    #Plot result
    sig_raw.plot(CurrentH, Signal, 'b')
    
    #Plot original data and polynomial fit through it
    sig_fit = sig_Plot.add_subplot(222)
    sig_fit.set_title('Background Fit', fontsize=12)
    sig_fit.plot(CurrentH, Signal, 'g')
    sig_fit.plot(CurrentH,fitdata[1], 'r')
    sig_fit.plot(CurrentH,fitdata[0], 'y')
    sig_fit.set_xlabel('Field ('+ x_units + ')', fontsize=12)
    sig_fit.set_ylabel('Signal (' + y_units + ')', fontsize=12)
    
    #Plot Windowed data
    sig_windowed = sig_Plot.add_subplot(223)
    sig_windowed.set_title('Windowed Data', fontsize=12)
    sig_windowed.plot(rebinH,windowed_data)
    sig_windowed.set_xlabel('Field ('+ x_units + ')', fontsize=12)
    sig_windowed.set_ylabel('Signal (' + y_units + ')', fontsize=12)
    
    #Plot FFT
    sig_fft = sig_Plot.add_subplot(224)
    sig_fft.set_title('FFT', fontsize=12)
    sig_fft.plot(Freq,FFT_Signal, 'g')
    sig_fft.axis([0,24000,0,max(FFT_Signal)+0.2*max(FFT_Signal)])
    sig_fft.set_xlabel('dHvA Frequency ('+ x_units + ')', fontsize=12)
    sig_fft.set_ylabel('Amplitude', fontsize=12)
    plt.draw()

    dHvApeaks = pf.peakfind(Freq,FFT_Signal,sig_fft)
  
    if (write_file == 1):
        os.chdir(path)
        filename = 'Sample_'+sample+'.dat'
        file_exist = os.path.isfile(filename)
        #print(file_exist)
        if (file_exist):
            openfile = open(filename,'a')
            outstr = name[0:-3]+ ' , '
            for i in range(0,len(dHvApeaks)):
                outstr = outstr + ' , ' + str(dHvApeaks[i][0]) + ' , ' + str(dHvApeaks[i][1])
            openfile.write(outstr + '\n')
            openfile.close()
        else:
            openfile = open(filename,'w')
            headerstring = "#This file is a list of peaks generated by Aaron's dHvA analysis program. The files listed below are found in the path " + path + '\n' + "#File , rotation file , F1 , A1 , F2 , A2 , ..." + '\n'
            outstr = name[0:-3]+ ' , '
            for i in range(0,len(dHvApeaks)):
                outstr = outstr + ' , ' + str(dHvApeaks[i][0]) + ' , ' + str(dHvApeaks[i][1])
            openfile.write(headerstring + outstr + '\n')
            openfile.close()
    
   # print(dHvApeaks)
   # print(len(dHvApeaks))  
    return dHvApeaks, figure_counter
